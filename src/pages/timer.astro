---
import Layout from "@layouts/Layout.astro";
---

<Layout>
  <main id="main-content" class="h-screen w-full">
    <section id="timer" class="h-screen w-full">
      <div id="controls" class="mt-4 flex items-center justify-center gap-4">
        <div id="time-controls" class="flex flex-col items-start">
          <select id="time-select" class="rounded border px-2 py-1">
            <option value="300">5 minutes</option>
            <option value="600">10 minutes</option>
            <option value="900">15 minutes</option>
            <option value="1200">20 minutes</option>
          </select>
        </div>
        <div id="type-controls">
          <select id="type-select">
            <option value="break">‚òïÔ∏è Break</option>
            <option value="lab">üßë‚Äçüî¨ Lab</option>
          </select>
        </div>
        <button id="start-button">‚ñ∂Ô∏è Start</button>
        <button id="stop-button">‚èπÔ∏è Stop </button>
      </div>
          <!-- New Quotes Section -->
    <section id="quotes" class="w-full text-center mt-0">
      <div id="quote-container" class="text-lg italic">Fetching quotes...</div>
    </section>
      <div
        id="countdown"
        class="flex h-screen w-full items-start justify-center"
        style="margin-top: 20%;"
      >
      </div>
    </section>
  </main>
</Layout>

<script>
  const countdownElement = document.getElementById("countdown");
  const timeSelect = document.getElementById("time-select");
  const startButton = document.getElementById("start-button");
  const stopButton = document.getElementById("stop-button");

  const countdownDefaultText = "‚è≤Ô∏è time for...";
  const countdownStopText = "‚èπÔ∏è Timer stopped";

  let timerInterval: NodeJS.Timeout | undefined;

  function updateTimer(timeLeft: number) {
    if (!countdownElement) return;

    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    const typeSelectElement = document.getElementById("type-select");
    const selectedType = typeSelectElement ? (typeSelectElement as HTMLSelectElement).value : "";
    const emoji = selectedType === "break" ? "‚òïÔ∏è" : "üßë‚Äçüî¨";
    const totalTime = parseInt((timeSelect as HTMLSelectElement).value, 10);
    const progressPercentage = (timeLeft / totalTime) * 100;

    const segments = Array.from({ length: totalTime / 15 }, (_, i) => {
      const segmentPosition = (i / (totalTime / 15)) * 100;
      return `<div style="position: absolute; left: ${segmentPosition}%; width: 1px; height: 100%; background-color: #ffffff; z-index: 1;"></div>`;
    }).join("");

    countdownElement.innerHTML = `
      <div>${emoji}</div>
      <div>${minutes}:${seconds.toString().padStart(2, "0")}</div>
      <div id="progress-bar-container" style="position: relative; width: 100%; height: 10px; background-color: #e0e0e0; margin-top: 10px;">
        ${segments}
        <div id="progress-bar" style="position: absolute; right: ${100 - progressPercentage}%; width: ${progressPercentage}%; height: 100%; background-color: #282728; z-index: 0;"></div>
      </div>
    `;

    // Show quotes only when the timer is running
    const quotesSection = document.getElementById("quotes");
    if (timeLeft > 0 && (selectedType === "lab" || selectedType !== "break") && quotesSection) {
      quotesSection.style.display = "block";
    } else if (quotesSection) {
      quotesSection.style.display = "none";
    }
  }

  function startTimer() {
    clearInterval(timerInterval);
    let timeLeft = parseInt((timeSelect as HTMLSelectElement).value, 10);
    updateTimer(timeLeft);

    if(startButton) {
      startButton.style.display = "none";
    }
    if(stopButton) {
      stopButton.style.display = "";
    }

    timerInterval = setInterval(() => {
      if (timeLeft > 0) {
        timeLeft -= 1;
        updateTimer(timeLeft);
      } else {
        clearInterval(timerInterval);
        if (countdownElement) countdownElement.textContent = "0:00";
        setTimeout(() => {
          if (countdownElement) countdownElement.textContent = countdownDefaultText;
        }, 1000);
        if (startButton) {
          startButton.style.display = "";
        }
        if (stopButton) {
          stopButton.style.display = "none";
        }
      }
    }, 1000);
  }

  function stopTimer() {
    clearInterval(timerInterval);
    if (countdownElement) countdownElement.textContent = countdownStopText;
    setTimeout(() => {
      if (countdownElement) countdownElement.textContent = countdownDefaultText;
    }, 1000);

    if (startButton) {
      startButton.style.display = "";
    }
    
    if (stopButton) {
      stopButton.style.display = "none";
    }
    // Hide quotes when the timer stops
    const quotesSection = document.getElementById("quotes");
    if (quotesSection) quotesSection.style.display = "none";
  }

  // Initially hide the quotes section
  const quotesSection = document.getElementById("quotes");
  if (quotesSection) quotesSection.style.display = "none";

  if (startButton) {
    startButton.addEventListener("click", startTimer);
  }
  if (stopButton) {
    stopButton.addEventListener("click", stopTimer);
  }
  if (stopButton) {
    stopButton.style.display = "none";
  }

  if (countdownElement) countdownElement.textContent = countdownDefaultText;

  const quoteContainer = document.getElementById("quote-container");
  const API_KEY = "AIzaSyB4LhuNf4_n0yoSXWwAwnNR7XC7A71-TDo";
  const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${API_KEY}`;

  async function fetchQuote() {
    if (!quoteContainer) return;

    try {
      const response = await fetch(API_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: "Get an encouraging comment about solving the problem, assignment or task at hand. It should be between 3 and 12 words and only return a single quote. Be really creative and witty. E.g. mix it up with quotes from Sheldon from the Big Bang Theory tv series or Hulk Hogan. But do not be sexist or racist.",
                },
              ],
            },
          ],
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch quote");
      }

      const data = await response.json();
      const quote = data.candidates?.[0]?.content?.parts?.[0]?.text;

      if (quote) {
        quoteContainer.textContent = quote;
      } else {
        quoteContainer.textContent = "No quote available at the moment.";
      }
    } catch (error) {
      console.error("Error fetching quote:", error);
      quoteContainer.textContent = "Error fetching quote.";
    }
  }

  // Fetch a new quote every 30 seconds
  setInterval(fetchQuote, 60000);
  fetchQuote(); // Initial fetch
</script>

<style>
  #timer {
    @apply pb-6 pt-4 text-center;
  }
  #timer h1 {
    @apply text-3xl font-bold;
  }
  #controls {
    @apply mt-4 flex items-center justify-center gap-4;
  }
  #time-controls,
  #te-controls {
    @apply flex flex-col items-start;
  }
  #time-controls label,
  #type-controls label {
    @apply mb-1;
  }
  #time-controls select,
  #type-controls select {
    @apply rounded border px-2 py-1;
  }
  #controls button {
    @apply rounded border px-4 py-2;
    @apply flex items-center justify-center;
  }
  #time-controls select,
  #type-controls select,
  #controls button {
    height: 32px;
  }
  #countdown {
    @apply mt-4 font-mono text-6xl;
    display: block
  }
  #stop-button {
    @apply rounded border px-4 py-2;
    width: 125px;
  }
  #start-button {
    @apply rounded border px-4 py-2;
    width: 125px;
  }
  button:hover, select:hover {
    border-width: 3px; /* Make border thicker on hover */
    border-color: #FFA500; /* Orange border color used on the website */
    cursor: pointer;
  }
  #quotes {
    @apply pb-6 pt-4 text-center;
  }
  #quotes h2 {
    @apply text-2xl font-bold;
  }
  #quote-container {
    @apply text-lg italic;
  }
</style>