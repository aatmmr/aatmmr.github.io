---
import { LOGO_IMAGE, LOGO_LABEL, SITE } from "@config";
import Layout from "@layouts/Layout.astro";
---

<Layout>
  <main id="main-content" class="h-screen w-full">
    <section id="header">
      <div class="header-logo" style="display: flex; justify-content: center; align-items: center;">
        <a href="/" class="logo whitespace-nowrap" style="display: flex; align-items: center;">
          {
        LOGO_IMAGE.enable ? (
          <div style="display: flex; align-items: center; padding-top: 25px;">
            <img
          src={`/${LOGO_IMAGE.svg ? "logo.svg" : "logo.png"}`}
          alt={SITE.title}
          width={LOGO_IMAGE.width}
          height={LOGO_IMAGE.height}
            />
            { LOGO_LABEL.enable ? <span style="margin-left: 10px;">{LOGO_LABEL.text}</span> : null }
          </div>
        ) : null
          } 
        </a>
      </div>
    </section>
    <section id="timer" class="h-screen w-full">
      <div id="controls">
        <div id="time-controls">
          <select id="time-select">
            <option value="300">5 minutes</option>
            <option value="600">10 minutes</option>
            <option value="900">15 minutes</option>
            <option value="1200">20 minutes</option>
          </select>
        </div>
        <div id="type-controls">
          <select id="type-select">
            <option value="break">‚òïÔ∏è Break</option>
            <option value="lab">üßë‚Äçüî¨ Lab</option>
          </select>
        </div>
        <button id="start-button">‚ñ∂Ô∏è Start</button>
        <button id="stop-button">‚èπÔ∏è Stop </button>
      </div>
      <div
        id="countdown"
        class="flex h-screen w-full items-start justify-center"
        style="margin-top: 40%;"
      >
      </div>
    </section>
  </main>
</Layout>

<script>
  const countdownElement = document.getElementById("countdown")!;
  const timeSelect = document.getElementById("time-select")! as HTMLSelectElement;
  const startButton = document.getElementById("start-button")!;
  const stopButton = document.getElementById("stop-button")!;

  const countdownDefaultText = "‚è≤Ô∏è time for...";
  const countdownStopText = "‚èπÔ∏è Timer stopped";

  let timerInterval: string | number | NodeJS.Timeout | undefined;

  function updateTimer(timeLeft: number) {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    const selectedType = (document.getElementById("type-select") as HTMLSelectElement).value;
    const emoji = selectedType === "break" ? "‚òïÔ∏è" : "üßë‚Äçüî¨";
    const totalTime = parseInt(timeSelect.value, 10);
    const progressPercentage = (timeLeft / totalTime) * 100;

    const segments = Array.from({ length: totalTime / 15 }, (_, i) => {
      const segmentPosition = (i / (totalTime / 15)) * 100;
      return `<div style="position: absolute; left: ${segmentPosition}%; width: 1px; height: 100%; background-color: #ffffff; z-index: 1;"></div>`;
    }).join("");

    countdownElement.innerHTML = `
      <div>${emoji}</div>
      <div>${minutes}:${seconds.toString().padStart(2, "0")}</div>
      <div id="progress-bar-container" style="position: relative; width: 100%; height: 10px; background-color: #e0e0e0; margin-top: 10px;">
        ${segments}
        <div id="progress-bar" style="position: absolute; right: ${100 - progressPercentage}%; width: ${progressPercentage}%; height: 100%; background-color: #282728; z-index: 0;"></div>
      </div>
    `;
  }

  function startTimer() {
    clearInterval(timerInterval);
    let timeLeft = parseInt(timeSelect.value, 10);
    updateTimer(timeLeft);

    startButton.style.display = "none";
    stopButton.style.display = "";

    timerInterval = setInterval(() => {
      if (timeLeft > 0) {
        timeLeft -= 1;
        updateTimer(timeLeft);
      } else {
        clearInterval(timerInterval);
        countdownElement.textContent = "0:00";
        setTimeout(() => {
          countdownElement.textContent = countdownDefaultText;
        }, 1000);
        startButton.style.display = "";
        stopButton.style.display = "none";
      }
    }, 1000);
  }

  function stopTimer() {
    clearInterval(timerInterval);
    countdownElement.textContent = countdownStopText;
    setTimeout(() => {
      countdownElement.textContent = countdownDefaultText;
    }, 1000);

    startButton.style.display = "";
    stopButton.style.display = "none";
  }

  startButton.addEventListener("click", startTimer);
  stopButton.addEventListener("click", stopTimer);
  stopButton.style.display = "none";
  countdownElement.textContent = countdownDefaultText;
</script>

<style>
  #timer {
    @apply pb-6 pt-4 text-center;
  }
  #timer h1 {
    @apply text-3xl font-bold;
  }
  #controls {
    @apply mt-4 flex items-center justify-center gap-4;
  }
  #time-controls,
  #te-controls {
    @apply flex flex-col items-start;
  }
  #time-controls label,
  #type-controls label {
    @apply mb-1;
  }
  #time-controls select,
  #type-controls select {
    @apply rounded border px-2 py-1;
  }
  #controls button {
    @apply rounded border px-4 py-2;
    @apply flex items-center justify-center;
  }
  #time-controls select,
  #type-controls select,
  #controls button {
    height: 32px;
  }
  #countdown {
    @apply mt-4 font-mono text-6xl;
    display: block
  }
  #stop-button {
    @apply rounded border px-4 py-2;
    width: 110px;
  }
  #start-button {
    @apply rounded border px-4 py-2;
    width: 110px;
  }
  button:hover, select:hover {
    border-width: 3px; /* Make border thicker on hover */
    border-color: #FFA500; /* Orange border color used on the website */
    cursor: pointer;
  }
</style>